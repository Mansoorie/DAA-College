
/*Given a sorted array of positive integers containing few duplicate elements, design an algorithm 
and implement it using a program to find whether the given key element is present in the array 
or not. If present, then also find the number of copies of given key. (Time Complexity = O(log n))
 */

#include <iostream>
using namespace std;
int binarySearch(int a[],int n,int key,bool help)
{
    int l=0,h=n-1,result=0;
    while(l<=h)
    {
        int mid= l + (h-l)/2;
        
        if(a[mid]==key)
        {
            result=mid;
            if(help)
            {
                h=mid-1;
            }
            else
            {
                l=mid+1;
            }
        }
        else if(a[mid]<key)
        {
            l=mid+1;
        }
        else
        {
            h=mid-1;
        }
    }
    return result;
}

int main() 
{
    int input;
    cout<<"\nEnter the number of times you want to input ";
    cin>>input;
    for(int k=0;k<input;k++)
    {
        int a[10];
        int n;
        cout<<"\nEnter the size of array ";
        cin>>n;
        for(int i=0;i<n;i++)
        {
            cin>>a[i];
        }
        for(int i=0;i<n;i++)
        {
            cout<<a[i]<<" ";
        }
        int key;
        cout<<"\nEnter the value of key";
        cin>>key;
        
        int first= binarySearch(a,n,key,true);
        
        if(first!=-1)
        {
            int second = binarySearch(a,n,key,false);
            int final= second - first + 1;
            cout<<"\nThe occurences of "<<key<<" are "<<final;
        }
    }
    return 0;
}